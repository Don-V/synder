file synder

break -function load_Synmap
break -function link_block_corners
break -function set_contig_corners
break -function set_overlap_group
break -function link_adjacent_blocks
break -function link_contiguous_blocks
break -function find_search_intervals

set print repeats 100

define ps
    print "--------------------------------------------"
    if $argc == 0
        print *syn
        print syn->genome[0]
        print syn->genome[1]
    end
    if $argc == 1
        print *syn->genome[$arg0]
    end
    if $argc == 2
        print *syn->genome[$arg0]->contig[$arg1]
    end
end

define pb
    print "--------------------------------------------"
    print *blk
end
define pbp
    print "--------------------------------------------"
    print *blk->parent
end
define pbo
    print "--------------------------------------------"
    print *blk->over
end
define pb-cor
    print "--------------------------------------------"
    print "prev start"
    print *blk->cor[0]
    print "next start"
    print *blk->cor[1]
    print "prev stop"
    print *blk->cor[2]
    print "next stop"
    print *blk->cor[3]
end
define pb-adj
    print "--------------------------------------------"
    print *blk->adj[0]
    print *blk->adj[1]
end
define pb-cnr
    print "--------------------------------------------"
    print *blk->cnr[0]
    print *blk->cnr[1]
end

define psv
    print "--------------------------------------------"
    if $argc == 1
        if $arg0 == 0
            print *syn
        end
        if $arg0 == 1
            print *syn
            print *syn->genome[0]
            print *syn->genome[1]
        end

        if $arg0 == 2
            print *syn->genome[0]->contig[0]
            print *syn->genome[1]->contig[0]
        end

    end
end

define pcb
   print "--------------------------------------------"
   print "---print all blocks---"
   set $i = (int)syn->genome[$arg0]->size - 1
   while $i >= 0
       set $j = (int)syn->genome[$arg0]->contig[$i]->size - 1
       while $j >= 0
           print syn->genome[$arg0]->contig[$i]->block[$j]
           set $j= $j - 1
       end
       set $i= $i - 1
   end
end

define pc
    print "--------------------------------------------"
    print *con
    print *con->cor[0]
    print *con->cor[1]
end

define pnode
    print "--------------------------------------------"
    if $argc == 0
        print *node 
        print  node->blk->parent->name
        print *node->blk
        print "over"
        print  node->blk->over->parent->name
        print *node->blk->over
    end
    if $argc > 0
        if $arg1 == 1
            print *node->down 
            print  node->down->blk->parent->name
            print *node->down->blk
            print "over"
            print  node->blk->over->parent->name
            print *node->blk->over
        end
        if $arg1 == 2
            print *node->down->down 
            print  node->down->down->blk->parent->name
            print *node->down->down->blk
            print "over"
            print  node->down->down->blk->over->parent->name
            print *node->down->down->blk->over
        end
        if $arg1 == 3
            print *node->down->down->down 
            print  node->down->down->down->blk->parent->name
            print *node->down->down->down->blk
            print "over"
            print  node->down->down->down->blk->over->parent->name
            print *node->down->down->down->blk->over
        end
    end
end
